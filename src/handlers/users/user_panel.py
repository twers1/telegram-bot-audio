import asyncio
import json
import os
import subprocess

import speech_recognition as sr

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from src.handlers.users.user_functions import subscriptions, is_user_subscribed, converter_text_to_voice, \
    voice_recognizer
from src.keyboards.inline.choice_buttons import main, main_admin, keyboard_open, language_buttons
from src.loader import bot, dp
from src.states import VoiceRecognitionStates
from src.utils.db_functions import add_users, add_users_func, get_links

from datetime import datetime


r = sr.Recognizer()

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å env –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ json. (–¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
ADMIN_ID = json.loads(os.getenv('ADMIN_ID'))


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    start_time = datetime.now()

    await add_users(user_id, username, start_time)

    await message.reply("üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\nü§ñ–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        "–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–¥–µ–π\n", reply_markup=main)

    if message.from_user.id in ADMIN_ID:
        await message.answer(f'–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞! –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüòé', reply_markup=main_admin)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
@dp.message_handler(text="üó£–•–æ—á—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
async def convert_to(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    await add_users_func(user_id, username, used_voice=True)
    await bot.send_message(message.chat.id, '–ü–æ–≥–Ω–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n'
                                            '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ')

    # –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    @dp.message_handler()
    async def get_text(message: types.Message):
        print('–∫—É-–∫—É —è —Ç—É—Ç')
        user_text = message.text
        user_id = message.from_user.id
        is_subbed = False
        for group_id in subscriptions.values():
            if await is_user_subscribed(user_id, group_id):
                is_subbed = True
                break
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        links = await get_links()
        result = '\n '.join(links)

        if not is_subbed:
            await message.reply(
                f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ"
                f" –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å 10 –ø–µ—Ä–≤—ã—Ö –ø–æ—Å—Ç–æ–≤."
                f" –≠—Ç–æ –Ω–∞—à–∏ —Å–ø–æ–Ω—Å–æ—Ä—ã –∏ –±–µ–∑ –Ω–∏—Ö –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
                f" –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞!!!"
                f"\nhttps://t.me/audio_26kadr_bot\nhttps://t.me/audio_26kadr_bot"
                f"\nhttps://t.me/audio_26kadr_bot\n {result}"
                f"–ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å ",
                reply_markup=keyboard_open)
            return
        if message.text == user_text:
            await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å...')
            voice = await converter_text_to_voice(user_text)
            print('–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å...')
            # –°—Ç–∞—Ä—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversion_message = await bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")

            for i in range(10):
                progress_bar = 'üü©' * i + '‚¨úÔ∏è' * (10 - i)
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=conversion_message.message_id,
                    text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: \n{progress_bar} {i * 10}%"
                )
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥

            voice = await converter_text_to_voice(user_text)

            # –û–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=conversion_message.message_id,
                text="‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            )

            await bot.send_voice(message.from_user.id, voice)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
@dp.callback_query_handler(lambda query: query.data == 'rules')
async def process_rules(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
@dp.callback_query_handler(lambda query: query.data == 'check_subbed')
async def check_subscribed(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    is_subbed = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –æ–Ω –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤
    for group_id in subscriptions.values():
        if not await is_user_subscribed(user_id, group_id):
            is_subbed = False
            break

    if is_subbed:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
                                                                " –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤! –í—ã –ª—É—á—à–∏–π‚ù§Ô∏è")
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
                                                                " –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤! –í—ã –ø–ª–æ—Ö–æ–πüíî")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=types.ContentType.TEXT, text="‚úçÔ∏è–•–æ—á—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
async def start_get_text_message(message: types.Message):
    if message.text == '‚úçÔ∏è–•–æ—á—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!':
        print('–•–æ—á—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        await message.answer('–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

        @dp.message_handler(content_types=types.ContentType.VOICE)
        async def voice_handler(message: types.Message, state: FSMContext):
            file_id = message.voice.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path

            file_size = file_info.file_size
            if int(file_size) >= 715000:
                await message.reply('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò–∑–≤–∏–Ω–∏')
            else:
                await file_info.download(destination='audio.ogg')
                await VoiceRecognitionStates.WaitingForVoiceMessage.set()
                await language_buttons(message)


@dp.callback_query_handler(lambda call: True, state=VoiceRecognitionStates.WaitingForVoiceMessage)
async def buttons(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    if call.data == 'russian':
        text = voice_recognizer('ru_RU')
        await bot.send_message(call.from_user.id, text)
        os.remove('audio.wav')
        os.remove('audio.ogg')
    elif call.data == 'english':
        text = voice_recognizer('en_EN')
        await bot.send_message(call.from_user.id, text)
        os.remove('audio.wav')
        os.remove('audio.ogg')

    await state.finish()