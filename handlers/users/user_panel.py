import asyncio
import json
import os
from io import BytesIO

from aiogram import types
from aiogram.types import CallbackQuery

from gtts import gTTS

from keyboards.inline.choice_buttons import main, keyboard_open, main_admin
from loader import bot, dp
from utils.db_functions import add_users, add_users_func, get_links

from datetime import datetime

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
subscriptions = {
    'channel2': "@dsfgbmnjmlhj"
}


# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_user_subscribed(user_id: int, chat_id: str) -> bool:
    member = await bot.get_chat_member(chat_id, user_id)
    return member.is_chat_member() or member.is_chat_owner() or member.is_chat_admin() or member.is_chat_creator()


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def converter_text_to_voice(text: str) -> BytesIO:
    bytes_file = BytesIO()
    audio = gTTS(text=text, lang="ru")
    audio.write_to_fp(bytes_file)
    bytes_file.seek(0)
    return bytes_file


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def converter_text_to_voice_en(text: str) -> BytesIO:
    bytes_file = BytesIO()
    audio = gTTS(text=text, lang="en")
    audio.write_to_fp(bytes_file)
    bytes_file.seek(0)
    return bytes_file


# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å env –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ json
ADMIN_ID = json.loads(os.getenv('ADMIN_ID'))


# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ /start - –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    start_time = datetime.now()

    await add_users(user_id, username, start_time)

    await message.reply("üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\nüñ• –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n", reply_markup=main)

    if message.from_user.id in ADMIN_ID:
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=main_admin)


# –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ". –¢–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(text="üó£–•–æ—á—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
async def convert_to(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    await add_users_func(user_id, username, used_voice=True)
    await bot.send_message(message.chat.id, '–ü–æ–≥–Ω–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç')

    @dp.message_handler()
    async def get_text(message: types.Message):
        user_text = message.text
        if message.text == user_text:
            await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å...')
            voice = await converter_text_to_voice(user_text)
            print('–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å...')
            # —Å—Ç–∞—Ä—Ç
            conversion_message = await bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")

            for i in range(10):
                progress_bar = 'üü©' * i + '‚¨úÔ∏è' * (10 - i)
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=conversion_message.message_id,
                    text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: \n{progress_bar} {i * 10}%"
                )
                await asyncio.sleep(0.5)  # –∑–∞–¥–µ—Ä–∂–∫–∞

            voice = await converter_text_to_voice(user_text)

            # –æ–∫–æ–Ω—á–∞–Ω–∏—è
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=conversion_message.message_id,
                text="‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            )

            await bot.send_voice(message.from_user.id, voice)
        # elif message.text == 'en':
        #     await bot.send_message(message.chat.id, 'Type any text and I will convert it into a voice message')
        #     print('Starting convert en...')
        #     await bot.send_message(message.chat.id, 'Starting convert...')
        #     voice = converter_text_to_voice_en(user_text)
        #     await bot.send_voice(message.from_user.id, voice)

        user_id = message.from_user.id
        is_subbed = False
        for group_id in subscriptions.values():
            if await is_user_subscribed(user_id, group_id):
                is_subbed = True
                break

        links = await get_links()
        result = '\n '.join(links)

        if not is_subbed:
            await message.reply(
                f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å 10 –ø–µ—Ä–≤—ã—Ö –ø–æ—Å—Ç–æ–≤."
                f" –≠—Ç–æ –Ω–∞—à–∏ —Å–ø–æ–Ω—Å–æ—Ä—ã –∏ –±–µ–∑ –Ω–∏—Ö –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
                f" –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞!!!"
                f"\nhttps://t.me/audio_26kadr_bot\nhttps://t.me/audio_26kadr_bot"
                f"\nhttps://t.me/audio_26kadr_bot\n {result}"
                f"–ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å ",
                reply_markup=keyboard_open)
            return

        # await message.answer("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ", reply_markup=language)


# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∞–≤–∏–ª–∞"
@dp.callback_query_handler(lambda query: query.data == 'rules')
async def process_rules(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞")


# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
@dp.callback_query_handler(lambda query: query.data == 'check_subbed')
async def check_subscribed(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    is_subbed = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –æ–Ω –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤
    for group_id in subscriptions.values():
        if not await is_user_subscribed(user_id, group_id):
            is_subbed = False
            break
        # if not await has_user_viewed_posts(user_id, group_id, 10):
        #     is_subbed = False
        #     break

    if is_subbed:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤!")
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤.")
