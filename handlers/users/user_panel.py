import json
import os
from io import BytesIO

from aiogram import types
from aiogram.types import CallbackQuery

from gtts import gTTS

from keyboards.inline.choice_buttons import main, keyboard_open, language, main_admin
from loader import bot, dp
from utils.connect_db import cursor_obj, con
from utils.db_functions import add_users

subscriptions = {
    'channel2': "@dsfgbmnjmlhj"
}


async def is_user_subscribed(user_id: int, chat_id: str) -> bool:
    member = await bot.get_chat_member(chat_id, user_id)
    return member.is_chat_member() or member.is_chat_owner() or member.is_chat_admin() or member.is_chat_creator()


def converter_text_to_voice(text: str) -> BytesIO:
    bytes_file = BytesIO()
    audio = gTTS(text=text, lang="ru")
    audio.write_to_fp(bytes_file)
    bytes_file.seek(0)
    return bytes_file


def converter_text_to_voice_en(text: str) -> BytesIO:
    bytes_file = BytesIO()
    audio = gTTS(text=text, lang="en")
    audio.write_to_fp(bytes_file)
    bytes_file.seek(0)
    return bytes_file


ADMIN_ID = json.loads(os.getenv('ADMIN_ID'))


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # user_id = message.from_user.id
    # username = message.from_user.username
    #
    # await add_users(user_id, username)

    await message.reply("üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\nüñ• –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n", reply_markup=main)

    if message.from_user.id in ADMIN_ID:
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=main_admin)


@dp.message_handler(text="üó£–•–æ—á—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
async def convert_to(message: types.Message):
    await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞ —è –µ–≥–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    @dp.message_handler()
    async def get_text(message: types.Message):
        user_id = message.from_user.id
        is_subbed = False
        for group_id in subscriptions.values():
            if await is_user_subscribed(user_id, group_id):
                is_subbed = True
                break

        if not is_subbed:
            await message.reply(
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å 10 –ø–µ—Ä–≤—ã—Ö –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –Ω–∞—à–∏ —Å–ø–æ–Ω—Å–æ—Ä—ã –∏ –±–µ–∑ –Ω–∏—Ö –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞!!!\nhttps://t.me/audio_26kadr_bot\nhttps://t.me/audio_26kadr_bot\nhttps://t.me/audio_26kadr_bot\n –ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å ",
                reply_markup=keyboard_open)
            return

        await message.answer("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ", reply_markup=language)


@dp.callback_query_handler(lambda query: query.data == 'rules')
async def process_rules(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞")


@dp.message_handler(text="ru")
async def convert_to_ru(message: types.Message):
    print('–ú—ã –≤ –∫–æ–Ω–≤–µ—Ä—Ç')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    @dp.message_handler()
    async def handle_user_text(message: types.Message):
        await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å...')
        voice = converter_text_to_voice(message.text)
        await bot.send_voice(message.from_user.id, voice)


@dp.message_handler(text="en")
async def convert_to_en(message: types.Message):
    await message.answer('Type any text and I will convert it into a voice message')

    @dp.message_handler()
    async def handle_user_text(message: types.Message):
        await bot.send_message(message.chat.id, 'Starting to convert...')
        voice = converter_text_to_voice_en(message.text)
        await bot.send_voice(message.from_user.id, voice)


@dp.callback_query_handler(lambda query: query.data == 'check_subbed')
async def check_subscribed(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    is_subbed = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –æ–Ω –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤
    for group_id in subscriptions.values():
        if not await is_user_subscribed(user_id, group_id):
            is_subbed = False
            break
        # if not await has_user_viewed_posts(user_id, group_id, 10):
        #     is_subbed = False
        #     break

    if is_subbed:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤!")
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–µ—Ä–≤—ã–µ 10 –ø–æ—Å—Ç–æ–≤.")
