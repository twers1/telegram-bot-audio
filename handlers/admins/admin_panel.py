import json
import os
from datetime import datetime

from handlers.users.user_panel import send_welcome
from keyboards.inline.choice_buttons import admin_panel, quit_button
from loader import dp, bot
from aiogram import types

from utils.db_functions import get_users_count, get_inactive_users_count

ADMIN_ID = json.loads(os.getenv('ADMIN_ID'))


# @dp.message_handler(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
# async def contacts(message: types.Message):
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω(–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)")
#     if message.from_user.id in ADMIN_ID:
#         await bot.send_message(message.from_user.id, f'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=admin_panel)

@dp.message_handler(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def redirect_to_second_bot(message: types.Message):
    if message.from_user.id in ADMIN_ID:
        url = f"https://t.me/voicetest2_bot?start=admin"
        await bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å–∫—É", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üôÑ", url=url)))


@dp.message_handler(commands='start')
async def handle_start_command(message: types.Message):
    if message.from_user.id in ADMIN_ID and message.get_args() == "admin":
        await bot.send_message(message.from_user.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=admin_panel)


@dp.message_handler(text="üë±‚Äç‚ôÇÔ∏è–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def statistics(message: types.Message):
    users_count = await get_users_count()
    inactive_users_count = await get_inactive_users_count()
    await bot.send_message(message.chat.id, f'–ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: *{datetime.now()}* –≤ –±–æ—Ç–µ:\n'
                                            f'–ñ–∏–≤—ã–µ: {users_count}\n'
                                            f'–ú–µ—Ä—Ç–≤—ã–µ: {inactive_users_count}\n'
                                            f'–°—É–º–º–∞—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: \n'
                                            f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç, –≤ –±–æ—Ç–µ: *–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é*', reply_markup=quit_button, parse_mode='Markdown')


@dp.message_handler(text="–í—ã–π—Ç–∏")
async def quit_to_lobby(message: types.Message):
    await send_welcome(message)






