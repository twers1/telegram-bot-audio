import json
import os
from datetime import datetime

from aiogram.dispatcher import FSMContext

from handlers.users.user_panel import send_welcome
from keyboards.inline.choice_buttons import admin_panel, quit_button
from loader import bot2, dp2
from aiogram import types

from states import Links
from utils.db_functions import get_users_count, get_inactive_users_count, add_link_to_db

ADMIN_ID = json.loads(os.getenv('ADMIN_ID'))


@dp2.message_handler(commands='start')
async def cmd_start(message: types.Message):
    print('–ú—ã –≤–æ –≤—Ç–æ—Ä–æ–º –±–æ—Ç–µ')
    if message.from_user.id in ADMIN_ID:
        await bot2.send_message(message.from_user.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=admin_panel)


@dp2.message_handler(text="üë±‚Äç‚ôÇÔ∏è–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def statistics(message: types.Message):
    users_count = await get_users_count()
    inactive_users_count = await get_inactive_users_count()
    await bot2.send_message(message.chat.id, f'–ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: *{datetime.now()}* –≤ –±–æ—Ç–µ:\n'
                                            f'–ñ–∏–≤—ã–µ: {users_count}\n'
                                            f'–ú–µ—Ä—Ç–≤—ã–µ: {inactive_users_count}\n'
                                            f'–°—É–º–º–∞—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: \n'
                                            f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç, –≤ –±–æ—Ç–µ: *–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é*', reply_markup=quit_button,
                                            parse_mode='Markdown')


@dp2.message_handler(text="–í—ã–π—Ç–∏")
async def quit_to_lobby(message: types.Message):
    await cmd_start(message)


@dp2.message_handler(text="üîó–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def add_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await bot2.send_message(message.from_user.id, "<b>–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª</b>")

    await state.reset_state()
    await Links.first()


@dp2.message_handler(state=Links.link)
async def get_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["link"] = message.text

    state_data = await state.get_data()
    link = state_data["link"]

    await message.answer("<b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")

    await add_link_to_db(link)
    await state.reset_state()
